
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Deck.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e31f9fOl6FASK8z1DIOII1V', 'Deck');
// scripts/Deck.js

"use strict";

// Learn cc.Class:
//  - https://docs.cocos.com/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    deck: [cc.Integer],
    role: null
  },
  showTips: function showTips(news) {
    var tips = new cc.Node();
    tips.addComponent(cc.Label);
    label = tips.getComponent(cc.Label);
    label.string = news;
    label.fontSize = 50;
    label.enableBold = true;
    tips.color = cc.color(255, 0, 0, 255);
    tips.addComponent('Tips');
    tips.parent = cc.find('Canvas');
  },
  choose_confirm: function choose_confirm() {
    var cardID = window.global.now_choosing_card;
    var role = cc.find('Canvas').getComponent('globalGame').nowProperty;
    var card = cc.find('Canvas/Card').getComponent('Card');

    if (role.mobility < card.cardCost[cardID]) {
      cc.find('Canvas/Deck').getComponent('Deck').showTips("行动值不足！");
    } else {
      card.cardFunction[16](card);
      cc.find('Canvas/Deck').getComponent('Deck').closeCards();
    } //关闭按钮


    cc.find('Canvas/choose_card_confirm').active = false;
    cc.find('Canvas/choose_card_cancel').active = false;
  },
  choose_cancel: function choose_cancel() {
    //关闭按钮
    cc.find('Canvas/choose_card_confirm').active = false;
    cc.find('Canvas/choose_card_cancel').active = false;
  },
  cardDetail: function cardDetail() {
    var node = cc.instantiate(this);
    node.name = "card_detail";
    node.scaleX = 0.8, node.scaleY = 0.8;
    node.setPosition(0, 50);
    node.parent = cc.find("Canvas");
  },
  closeDetail: function closeDetail() {
    var node = cc.find("Canvas/card_detail");
    if (node != null) node.destroy();
  },
  removeCard: function removeCard(cardID) {
    var role = cc.find('Canvas').getComponent('globalGame').nowProperty;

    for (var i = 0; i < role.cards.length; ++i) {
      if (role.cards[i] == cardID) {
        role.cards.splice(i, 1);
        break;
      }
    }
  },
  chooseCard: function chooseCard(event) {
    var deck = cc.find("Canvas/Deck").getComponent("Deck");
    deck.closeDetail(); //显示确定/取消按钮

    cc.find('Canvas/choose_card_confirm').active = true;
    cc.find('Canvas/choose_card_cancel').active = true; //重置当前选择的手牌

    window.global.now_choosing_card = this.cardID;
    event.stopPropagation();
  },
  showCards: function showCards() {
    var isPlayCard = cc.find("Canvas").getComponent("globalGame").nowStep == 3;

    for (var i = 0; i < this.deck.length; ++i) {
      var cardID = this.deck[i];
      var node = cc.instantiate(window.global.cardnode[cardID]);
      node.scaleX = 0.4, node.scaleY = 0.4;
      node.setPosition(200 + i * 200, 0);
      node.cardID = cardID;
      node.parent = this.node;
      node.on("mouseenter", this.cardDetail, node);
      node.on("mouseleave", this.closeDetail, node);

      if (isPlayCard == true) {
        node.on("mousedown", this.chooseCard, node);
      }
    }
  },
  closeCards: function closeCards() {
    var children = cc.find("Canvas/Deck").children;

    for (var i = 0; i < children.length; ++i) {
      children[i].destroy();
    }

    deck = cc.find('Canvas/Deck').getComponent('Deck');
    deck.node.off("mousedown", this.closeCards, deck);
    deck.node.on("mousedown", this.initDeck, deck);
  },
  initDeck: function initDeck() {
    this.role = cc.find("Canvas").getComponent("globalGame").nowPlayer;
    this.deck = this.role.getComponent("Person").cards;
    this.showCards();
    this.node.off("mousedown", this.initDeck, this);
    this.node.on("mousedown", this.closeCards, this);
  },
  onLoad: function onLoad() {},
  start: function start() {
    this.node.on("mousedown", this.initDeck, this);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcRGVjay5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsImRlY2siLCJJbnRlZ2VyIiwicm9sZSIsInNob3dUaXBzIiwibmV3cyIsInRpcHMiLCJOb2RlIiwiYWRkQ29tcG9uZW50IiwiTGFiZWwiLCJsYWJlbCIsImdldENvbXBvbmVudCIsInN0cmluZyIsImZvbnRTaXplIiwiZW5hYmxlQm9sZCIsImNvbG9yIiwicGFyZW50IiwiZmluZCIsImNob29zZV9jb25maXJtIiwiY2FyZElEIiwid2luZG93IiwiZ2xvYmFsIiwibm93X2Nob29zaW5nX2NhcmQiLCJub3dQcm9wZXJ0eSIsImNhcmQiLCJtb2JpbGl0eSIsImNhcmRDb3N0IiwiY2FyZEZ1bmN0aW9uIiwiY2xvc2VDYXJkcyIsImFjdGl2ZSIsImNob29zZV9jYW5jZWwiLCJjYXJkRGV0YWlsIiwibm9kZSIsImluc3RhbnRpYXRlIiwibmFtZSIsInNjYWxlWCIsInNjYWxlWSIsInNldFBvc2l0aW9uIiwiY2xvc2VEZXRhaWwiLCJkZXN0cm95IiwicmVtb3ZlQ2FyZCIsImkiLCJjYXJkcyIsImxlbmd0aCIsInNwbGljZSIsImNob29zZUNhcmQiLCJldmVudCIsInN0b3BQcm9wYWdhdGlvbiIsInNob3dDYXJkcyIsImlzUGxheUNhcmQiLCJub3dTdGVwIiwiY2FyZG5vZGUiLCJvbiIsImNoaWxkcmVuIiwib2ZmIiwiaW5pdERlY2siLCJub3dQbGF5ZXIiLCJvbkxvYWQiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLElBQUksRUFBQyxDQUFDSixFQUFFLENBQUNLLE9BQUosQ0FERztBQUVSQyxJQUFB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QkF5R0k7QUFDTCxTQUFLMUIsSUFBTCxDQUFVb0IsRUFBVixDQUFhLFdBQWIsRUFBeUIsS0FBS0csUUFBOUIsRUFBdUMsSUFBdkM7QUFFSCxHQTVHSSxDQThHTDs7QUE5R0ssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGVhcm4gY2MuQ2xhc3M6XHJcbi8vICAtIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL2NsYXNzLmh0bWxcclxuLy8gTGVhcm4gQXR0cmlidXRlOlxyXG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXHJcbi8vIExlYXJuIGxpZmUtY3ljbGUgY2FsbGJhY2tzOlxyXG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXHJcblxyXG5jYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIGRlY2s6W2NjLkludGVnZXJdLFxyXG4gICAgICAgIHJvbGU6IG51bGwsXHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBzaG93VGlwczpmdW5jdGlvbihuZXdzKXtcclxuICAgICAgICB2YXIgdGlwcz1uZXcgY2MuTm9kZSgpO1xyXG4gICAgICAgIHRpcHMuYWRkQ29tcG9uZW50KGNjLkxhYmVsKTtcclxuICAgICAgICBsYWJlbD10aXBzLmdldENvbXBvbmVudChjYy5MYWJlbCk7XHJcbiAgICAgICAgbGFiZWwuc3RyaW5nPW5ld3M7XHJcbiAgICAgICAgbGFiZWwuZm9udFNpemU9NTA7XHJcbiAgICAgICAgbGFiZWwuZW5hYmxlQm9sZD10cnVlO1xyXG4gICAgICAgIHRpcHMuY29sb3I9Y2MuY29sb3IoMjU1LDAsMCwyNTUpO1xyXG4gICAgICAgIHRpcHMuYWRkQ29tcG9uZW50KCdUaXBzJyk7XHJcbiAgICAgICAgdGlwcy5wYXJlbnQ9Y2MuZmluZCgnQ2FudmFzJyk7ICAgICAgICBcclxuICAgIH0sXHJcbiAgICBjaG9vc2VfY29uZmlybTpmdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciBjYXJkSUQ9d2luZG93Lmdsb2JhbC5ub3dfY2hvb3NpbmdfY2FyZDtcclxuICAgICAgICB2YXIgcm9sZT1jYy5maW5kKCdDYW52YXMnKS5nZXRDb21wb25lbnQoJ2dsb2JhbEdhbWUnKS5ub3dQcm9wZXJ0eTtcclxuICAgICAgICB2YXIgY2FyZD1jYy5maW5kKCdDYW52YXMvQ2FyZCcpLmdldENvbXBvbmVudCgnQ2FyZCcpO1xyXG4gICAgICAgIGlmIChyb2xlLm1vYmlsaXR5PGNhcmQuY2FyZENvc3RbY2FyZElEXSl7XHJcbiAgICAgICAgICAgIGNjLmZpbmQoJ0NhbnZhcy9EZWNrJykuZ2V0Q29tcG9uZW50KCdEZWNrJykuc2hvd1RpcHMoXCLooYzliqjlgLzkuI3otrPvvIFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGNhcmQuY2FyZEZ1bmN0aW9uWzE2XShjYXJkKTtcclxuICAgICAgICAgICAgY2MuZmluZCgnQ2FudmFzL0RlY2snKS5nZXRDb21wb25lbnQoJ0RlY2snKS5jbG9zZUNhcmRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8v5YWz6Zet5oyJ6ZKuXHJcblx0XHRjYy5maW5kKCdDYW52YXMvY2hvb3NlX2NhcmRfY29uZmlybScpLmFjdGl2ZT1mYWxzZTtcclxuICAgICAgICBjYy5maW5kKCdDYW52YXMvY2hvb3NlX2NhcmRfY2FuY2VsJykuYWN0aXZlPWZhbHNlOyAgICAgICAgICAgIFxyXG4gICAgfSxcclxuXHRjaG9vc2VfY2FuY2VsOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgLy/lhbPpl63mjInpkq5cclxuXHRcdGNjLmZpbmQoJ0NhbnZhcy9jaG9vc2VfY2FyZF9jb25maXJtJykuYWN0aXZlPWZhbHNlO1xyXG4gICAgICAgIGNjLmZpbmQoJ0NhbnZhcy9jaG9vc2VfY2FyZF9jYW5jZWwnKS5hY3RpdmU9ZmFsc2U7ICAgICAgICBcclxuICAgIH0sXHJcbiAgICBjYXJkRGV0YWlsOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIG5vZGU9Y2MuaW5zdGFudGlhdGUodGhpcyk7XHJcbiAgICAgICAgbm9kZS5uYW1lPVwiY2FyZF9kZXRhaWxcIjtcclxuICAgICAgICBub2RlLnNjYWxlWD0wLjgsbm9kZS5zY2FsZVk9MC44O1xyXG4gICAgICAgIG5vZGUuc2V0UG9zaXRpb24oMCw1MCk7XHJcbiAgICAgICAgbm9kZS5wYXJlbnQ9Y2MuZmluZChcIkNhbnZhc1wiKTtcclxuICAgICAgICBcclxuICAgIH0sXHJcbiAgICBjbG9zZURldGFpbDpmdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciBub2RlPWNjLmZpbmQoXCJDYW52YXMvY2FyZF9kZXRhaWxcIik7XHJcbiAgICAgICAgaWYgKG5vZGUhPW51bGwpXHJcbiAgICAgICAgICAgIG5vZGUuZGVzdHJveSgpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZUNhcmQ6ZnVuY3Rpb24oY2FyZElEKXtcclxuICAgICAgICB2YXIgcm9sZT1jYy5maW5kKCdDYW52YXMnKS5nZXRDb21wb25lbnQoJ2dsb2JhbEdhbWUnKS5ub3dQcm9wZXJ0eTtcclxuICAgICAgICBmb3IgKHZhciBpPTA7aTxyb2xlLmNhcmRzLmxlbmd0aDsrK2kpXHJcbiAgICAgICAgICAgIGlmIChyb2xlLmNhcmRzW2ldPT1jYXJkSUQpe1xyXG4gICAgICAgICAgICAgICAgcm9sZS5jYXJkcy5zcGxpY2UoaSwxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY2hvb3NlQ2FyZDpmdW5jdGlvbihldmVudCl7XHJcbiAgICAgICAgdmFyIGRlY2s9Y2MuZmluZChcIkNhbnZhcy9EZWNrXCIpLmdldENvbXBvbmVudChcIkRlY2tcIik7XHJcbiAgICAgICAgZGVjay5jbG9zZURldGFpbCgpO1xyXG4gICAgICAgIC8v5pi+56S656Gu5a6aL+WPlua2iOaMiemSrlxyXG5cdFx0Y2MuZmluZCgnQ2FudmFzL2Nob29zZV9jYXJkX2NvbmZpcm0nKS5hY3RpdmU9dHJ1ZTtcclxuICAgICAgICBjYy5maW5kKCdDYW52YXMvY2hvb3NlX2NhcmRfY2FuY2VsJykuYWN0aXZlPXRydWU7XHJcbiAgICAgICAgLy/ph43nva7lvZPliY3pgInmi6nnmoTmiYvniYxcclxuICAgICAgICB3aW5kb3cuZ2xvYmFsLm5vd19jaG9vc2luZ19jYXJkPXRoaXMuY2FyZElEO1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfSxcdFxyXG4gICAgc2hvd0NhcmRzOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIGlzUGxheUNhcmQ9KGNjLmZpbmQoXCJDYW52YXNcIikuZ2V0Q29tcG9uZW50KFwiZ2xvYmFsR2FtZVwiKS5ub3dTdGVwPT0zKTtcclxuICAgICAgICBmb3IgKHZhciBpPTA7aTx0aGlzLmRlY2subGVuZ3RoOysraSl7XHJcbiAgICAgICAgICAgIHZhciBjYXJkSUQ9dGhpcy5kZWNrW2ldO1xyXG4gICAgICAgICAgICB2YXIgbm9kZT1jYy5pbnN0YW50aWF0ZSh3aW5kb3cuZ2xvYmFsLmNhcmRub2RlW2NhcmRJRF0pO1xyXG4gICAgICAgICAgICBub2RlLnNjYWxlWD0wLjQsbm9kZS5zY2FsZVk9MC40O1xyXG4gICAgICAgICAgICBub2RlLnNldFBvc2l0aW9uKDIwMCtpKjIwMCwwKTtcclxuICAgICAgICAgICAgbm9kZS5jYXJkSUQ9Y2FyZElEO1xyXG4gICAgICAgICAgICBub2RlLnBhcmVudD10aGlzLm5vZGU7XHJcbiAgICAgICAgICAgIG5vZGUub24oXCJtb3VzZWVudGVyXCIsdGhpcy5jYXJkRGV0YWlsLG5vZGUpO1xyXG4gICAgICAgICAgICBub2RlLm9uKFwibW91c2VsZWF2ZVwiLHRoaXMuY2xvc2VEZXRhaWwsbm9kZSk7XHJcblx0XHRcdGlmIChpc1BsYXlDYXJkPT10cnVlKXtcclxuXHRcdFx0ICAgIG5vZGUub24oXCJtb3VzZWRvd25cIix0aGlzLmNob29zZUNhcmQsbm9kZSk7XHJcblx0XHRcdH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cdGNsb3NlQ2FyZHM6ZnVuY3Rpb24oKXtcclxuXHRcdHZhciBjaGlsZHJlbj1jYy5maW5kKFwiQ2FudmFzL0RlY2tcIikuY2hpbGRyZW47XHJcblx0XHRmb3IgKHZhciBpPTA7aTxjaGlsZHJlbi5sZW5ndGg7KytpKVxyXG4gICAgICAgICAgICBjaGlsZHJlbltpXS5kZXN0cm95KCk7XHJcbiAgICAgICAgZGVjaz1jYy5maW5kKCdDYW52YXMvRGVjaycpLmdldENvbXBvbmVudCgnRGVjaycpO1xyXG5cdFx0ZGVjay5ub2RlLm9mZihcIm1vdXNlZG93blwiLHRoaXMuY2xvc2VDYXJkcyxkZWNrKTtcclxuXHRcdGRlY2subm9kZS5vbihcIm1vdXNlZG93blwiLHRoaXMuaW5pdERlY2ssZGVjayk7XHJcbiAgICB9LFxyXG4gICAgaW5pdERlY2s6ZnVuY3Rpb24oKXtcclxuXHRcdHRoaXMucm9sZT1jYy5maW5kKFwiQ2FudmFzXCIpLmdldENvbXBvbmVudChcImdsb2JhbEdhbWVcIikubm93UGxheWVyO1xyXG5cdFx0dGhpcy5kZWNrPXRoaXMucm9sZS5nZXRDb21wb25lbnQoXCJQZXJzb25cIikuY2FyZHM7XHJcbiAgICAgICAgdGhpcy5zaG93Q2FyZHMoKTtcclxuICAgICAgICB0aGlzLm5vZGUub2ZmKFwibW91c2Vkb3duXCIsdGhpcy5pbml0RGVjayx0aGlzKTtcclxuICAgICAgICB0aGlzLm5vZGUub24oXCJtb3VzZWRvd25cIix0aGlzLmNsb3NlQ2FyZHMsdGhpcyk7XHJcbiAgICB9LFxyXG4gICAgb25Mb2FkICgpIHtcclxuICAgICAgICBcclxuICAgIH0sXHJcblxyXG4gICAgc3RhcnQgKCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihcIm1vdXNlZG93blwiLHRoaXMuaW5pdERlY2ssdGhpcyk7XHJcblxyXG4gICAgfSxcclxuXHJcbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcclxufSk7XHJcbiJdfQ==