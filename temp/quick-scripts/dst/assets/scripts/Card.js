
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Card.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c7d01kf4m1Pi6InQGfSXvtd', 'Card');
// scripts/Card.js

"use strict";

// Learn cc.Class:
//  - https://docs.cocos.com/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    cardCost: [cc.Integer],
    cardFunction: null
  },
  //卡牌响应函数中的this不是card.js
  shield_3: function shield_3(card) {
    var role = cc.find('Canvas').getComponent('globalGame').nowProperty;
    role.shield = 1;
    role.mobility -= card.cardCost[3];
    cc.find('Canvas/Deck').getComponent('Deck').removeCard(3);
  },
  halfShield_4: function halfShield_4(card) {
    var role = cc.find('Canvas').getComponent('globalGame').nowProperty;
    var index = Number(role.name[6]);
    var teammate = index + 2 > 4 ? index - 2 : index + 2;
    teammate = cc.find("Canvas/Persons/Person" + teammate).getComponent('Person');
    role.halfShield += 1;
    if (teammate.isDead == 0) teammate.halfShield += 1;
    role.mobility -= card.cardCost[4];
    cc.find('Canvas/Deck').getComponent('Deck').removeCard(4);
  },
  bless_5: function bless_5(card) {
    var role = cc.find('Canvas').getComponent('globalGame').nowPlayer;
    var index = Number(role.name[6]);
    var teammate = index + 2 > 4 ? index - 2 : index + 2;
    role.getComponent('Person').attcak += 1;
    cc.find("Canvas/Persons/Person" + teammate).getComponent('Person').attack += 1;
    var buff = cc.find('Canvas').getComponent('Buff');
    buff.todoList.push({
      endTurn: window.global.nowTurn + 2,
      person: [role, cc.find("Canvas/Persons/Person" + teammate)],
      act: function act() {
        this.person[0].getComponent('Person').attack = Math.max(0, this.person[0].getComponent('Person').attack - 1);
        this.person[1].getComponent('Person').attack = Math.max(0, this.person[1].getComponent('Person').attack - 1);
      }
    });
    role.mobility -= card.cardCost[5];
    cc.find('Canvas/Deck').getComponent('Deck').removeCard(5);
  },
  weak_6: function weak_6(card) {
    var role = cc.find('Canvas').getComponent('globalGame').nowPlayer;
    var index = Number(role.name[6]);
    var teammate = index + 2 > 4 ? index - 2 : index + 2;
    var enemy1 = index + 1 > 4 ? index - 3 : index + 1;
    var enemy2 = teammate + 1 > 4 ? teammate - 3 : teammate + 1;
    enemy1 = cc.find("Canvas/Persons/Person" + enemy1).getComponent('Person');
    enemy2 = cc.find("Canvas/Persons/Person" + enemy2).getComponent('Person');
    var buff = cc.find('Canvas').getComponent('Buff');
    buff.todoList.push({
      endTurn: window.global.nowTurn + 2,
      person: [enemy1, enemy1.attack != 0, enemy2, enemy2.attack != 0],
      act: function act() {
        this.person[0].attack += person[1];
        this.attack[2].attack += person[3];
      }
    });
    enemy1.attack = Math.max(0, enemy1.attack - 1);
    enemy2.attack = Math.max(0, enemy2.attack - 1);
    role.mobility -= card.cardCost[6];
    cc.find('Canvas/Deck').getComponent('Deck').removeCard(6);
  },
  heal_8: function heal_8(card) {
    var role = cc.find('Canvas').getComponent('globalGame').nowProperty;
    role.blood += 1;
    role.mobility -= card.cardCost[8];
    cc.find('Canvas/Deck').getComponent('Deck').removeCard(8);
  },
  holyNova_9: function holyNova_9(card) {
    var role = cc.find('Canvas').getComponent('globalGame').nowPlayer;
    var index = Number(role.name[6]);
    var teammate = index + 2 > 4 ? index - 2 : index + 2;
    var enemy1 = index + 1 > 4 ? index - 3 : index + 1;
    var enemy2 = teammate + 1 > 4 ? teammate - 3 : teammate + 1;
    role = cc.find("Canvas/Persons/Person" + index).getComponent('Person');
    teammate = cc.find("Canvas/Persons/Person" + teammate).getComponent('Person');
    enemy1 = cc.find("Canvas/Persons/Person" + enemy1).getComponent('Person');
    enemy2 = cc.find("Canvas/Persons/Person" + enemy2).getComponent('Person');
    if (role.isDead == 0) role.blood += 2;
    if (teammate.isDead == 0) teammate.blood += 2;
    if (enemy1.isDead == 0) enemy1.blood += 1;
    if (enemy2.isDead == 0) enemy2.blood += 1;
    role.mobility -= card.cardCost[9];
    cc.find('Canvas/Deck').getComponent('Deck').removeCard(9);
  },
  tough_12: function tough_12(card) {
    var role = cc.find('Canvas').getComponent('globalGame').nowProperty;
    role.attack *= 2;
    var buff = cc.find('Canvas').getComponent('Buff');
    buff.todoList.push({
      endTurn: window.global.nowTurn + 1,
      person: role,
      act: function act() {
        this.person.attack = Number(this.person.attack / 2);
      }
    });
    role.mobility -= card.cardCost[12];
    cc.find('Canvas/Deck').getComponent('Deck').removeCard(12);
  },
  save_16: function save_16(card) {
    var role = cc.find('Canvas').getComponent('globalGame').nowProperty;
    var index = Number(role.name[6]);
    var teammate = index + 2 > 4 ? index - 2 : index + 2;
    teammate = cc.find("Canvas/Persons/Person" + teammate).getComponent('Person');

    if (teammate.isDead == 1) {
      teammate.isDead = 0;
      teammate.blood = 5;
      teammate.mobility = 3;
    }

    role.mobility -= card.cardCost[16];
    cc.find('Canvas/Deck').getComponent('Deck').removeCard(16);
  },
  onLoad: function onLoad() {
    this.cardCost = [0, 0, 0, 0, 0, 1111110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //[4,3,2,3,3,4,4,5,2,3,3,3,3,3,4,4,5];

    this.cardFunction = new Array();
    this.cardFunction[3] = this.shield_3;
    this.cardFunction[4] = this.halfShield_4;
    this.cardFunction[5] = this.bless_5;
    this.cardFunction[6] = this.weak_6;
    this.cardFunction[8] = this.heal_8;
    this.cardFunction[9] = this.holyNova_9;
    this.cardFunction[12] = this.tough_12;
    this.cardFunction[16] = this.save_16;
  },
  start: function start() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcQ2FyZC5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsImNhcmRDb3N0IiwiSW50ZWdlciIsImNhcmRGdW5jdGlvbiIsInNoaWVsZF8zIiwiY2FyZCIsInJvbGUiLCJmaW5kIiwiZ2V0Q29tcG9uZW50Iiwibm93UHJvcGVydHkiLCJzaGllbGQiLCJtb2JpbGl0eSIsInJlbW92ZUNhcmQiLCJoYWxmU2hpZWxkXzQiLCJpbmRleCIsIk51bWJlciIsIm5hbWUiLCJ0ZWFtbWF0ZSIsImhhbGZTaGllbGQiLCJpc0RlYWQiLCJibGVzc181Iiwibm93UGxheWVyIiwiYXR0Y2FrIiwiYXR0YWNrIiwiYnVmZiIsInRvZG9MaXN0IiwicHVzaCIsImVuZFR1cm4iLCJ3aW5kb3ciLCJnbG9iYWwiLCJub3dUdXJuIiwicGVyc29uIiwiYWN0IiwiTWF0aCIsIm1heCIsIndlYWtfNiIsImVuZW15MSIsImVuZW15MiIsImhlYWxfOCIsImJsb29kIiwiaG9seU5vdmFfOSIsInRvdWdoXzEyIiwic2F2ZV8xNiIsIm9uTG9hZCIsIkFycmF5Iiwic3RhcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBR0xDLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxRQUFRLEVBQUMsQ0FBQ0osRUFBRSxDQUFDSyxPQUFKLENBREQ7QUFFUkMsSUFBQUEsWUFBWSxFQUFDO0FBRkwsR0FIUDtBQU9MO0FBQ0FDLEVBQUFBLFFBQVEsRUFBQyxrQkFBU0MsSUFBVCxFQUFjO0FBQ25CLFFBQUlDLElBQUksR0FBQ1QsRUFBRSxDQUFDVSxJQUFILENBQVEsUUFBUixFQUFrQkMsWUFBbEIsQ0FBK0IsWUFBL0IsRUFBNkNDLFdBQXREO0FBQ0FILElBQUFBLElBQUks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QUFLaEMsWUFBTCxDQUFrQixDQUFsQixJQUFxQixLQUFLbUMsTUFBMUI7QUFDQSxTQUFLbkMsWUFBTCxDQUFrQixDQUFsQixJQUFxQixLQUFLcUMsVUFBMUI7QUFDQSxTQUFLckMsWUFBTCxDQUFrQixFQUFsQixJQUFzQixLQUFLc0MsUUFBM0I7QUFDQSxTQUFLdEMsWUFBTCxDQUFrQixFQUFsQixJQUFzQixLQUFLdUMsT0FBM0I7QUFDSCxHQW5JSTtBQXFJTEcsRUFBQUEsS0FySUssbUJBcUlJLENBRVIsQ0F2SUksQ0F5SUw7O0FBeklLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxyXG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9jbGFzcy5odG1sXHJcbi8vIExlYXJuIEF0dHJpYnV0ZTpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxyXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxyXG5cclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG5cclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBjYXJkQ29zdDpbY2MuSW50ZWdlcl0sXHJcbiAgICAgICAgY2FyZEZ1bmN0aW9uOm51bGwsXHJcbiAgICB9LFxyXG4gICAgLy/ljaHniYzlk43lupTlh73mlbDkuK3nmoR0aGlz5LiN5pivY2FyZC5qc1xyXG4gICAgc2hpZWxkXzM6ZnVuY3Rpb24oY2FyZCl7XHJcbiAgICAgICAgdmFyIHJvbGU9Y2MuZmluZCgnQ2FudmFzJykuZ2V0Q29tcG9uZW50KCdnbG9iYWxHYW1lJykubm93UHJvcGVydHk7XHJcbiAgICAgICAgcm9sZS5zaGllbGQ9MTtcclxuICAgICAgICByb2xlLm1vYmlsaXR5LT1jYXJkLmNhcmRDb3N0WzNdO1xyXG4gICAgICAgIGNjLmZpbmQoJ0NhbnZhcy9EZWNrJykuZ2V0Q29tcG9uZW50KCdEZWNrJykucmVtb3ZlQ2FyZCgzKTtcclxuICAgIH0sXHJcbiAgICBoYWxmU2hpZWxkXzQ6ZnVuY3Rpb24oY2FyZCl7XHJcbiAgICAgICAgdmFyIHJvbGU9Y2MuZmluZCgnQ2FudmFzJykuZ2V0Q29tcG9uZW50KCdnbG9iYWxHYW1lJykubm93UHJvcGVydHk7XHJcbiAgICAgICAgdmFyIGluZGV4PU51bWJlcihyb2xlLm5hbWVbNl0pO1xyXG4gICAgICAgIHZhciB0ZWFtbWF0ZT1pbmRleCsyPjQ/aW5kZXgtMjppbmRleCsyO1xyXG4gICAgICAgIHRlYW1tYXRlPWNjLmZpbmQoXCJDYW52YXMvUGVyc29ucy9QZXJzb25cIit0ZWFtbWF0ZSkuZ2V0Q29tcG9uZW50KCdQZXJzb24nKTtcclxuICAgICAgICByb2xlLmhhbGZTaGllbGQrPTE7XHJcbiAgICAgICAgaWYgKHRlYW1tYXRlLmlzRGVhZD09MClcclxuICAgICAgICAgICAgdGVhbW1hdGUuaGFsZlNoaWVsZCs9MTtcclxuICAgICAgICByb2xlLm1vYmlsaXR5LT1jYXJkLmNhcmRDb3N0WzRdO1xyXG4gICAgICAgIGNjLmZpbmQoJ0NhbnZhcy9EZWNrJykuZ2V0Q29tcG9uZW50KCdEZWNrJykucmVtb3ZlQ2FyZCg0KTtcclxuICAgIH0sXHJcbiAgICBibGVzc181OmZ1bmN0aW9uKGNhcmQpe1xyXG4gICAgICAgIHZhciByb2xlPWNjLmZpbmQoJ0NhbnZhcycpLmdldENvbXBvbmVudCgnZ2xvYmFsR2FtZScpLm5vd1BsYXllcjtcclxuICAgICAgICB2YXIgaW5kZXg9TnVtYmVyKHJvbGUubmFtZVs2XSk7XHJcbiAgICAgICAgdmFyIHRlYW1tYXRlPWluZGV4KzI+ND9pbmRleC0yOmluZGV4KzI7XHJcbiAgICAgICAgcm9sZS5nZXRDb21wb25lbnQoJ1BlcnNvbicpLmF0dGNhays9MTtcclxuICAgICAgICBjYy5maW5kKFwiQ2FudmFzL1BlcnNvbnMvUGVyc29uXCIrdGVhbW1hdGUpLmdldENvbXBvbmVudCgnUGVyc29uJykuYXR0YWNrKz0xOyAgICBcclxuICAgICAgICB2YXIgYnVmZj1jYy5maW5kKCdDYW52YXMnKS5nZXRDb21wb25lbnQoJ0J1ZmYnKTtcclxuICAgICAgICBidWZmLnRvZG9MaXN0LnB1c2goe1xyXG4gICAgICAgICAgICBlbmRUdXJuOndpbmRvdy5nbG9iYWwubm93VHVybisyLFxyXG4gICAgICAgICAgICBwZXJzb246W3JvbGUsY2MuZmluZChcIkNhbnZhcy9QZXJzb25zL1BlcnNvblwiK3RlYW1tYXRlKV0sXHJcbiAgICAgICAgICAgIGFjdDpmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wZXJzb25bMF0uZ2V0Q29tcG9uZW50KCdQZXJzb24nKS5hdHRhY2s9TWF0aC5tYXgoMCx0aGlzLnBlcnNvblswXS5nZXRDb21wb25lbnQoJ1BlcnNvbicpLmF0dGFjay0xKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGVyc29uWzFdLmdldENvbXBvbmVudCgnUGVyc29uJykuYXR0YWNrPU1hdGgubWF4KDAsdGhpcy5wZXJzb25bMV0uZ2V0Q29tcG9uZW50KCdQZXJzb24nKS5hdHRhY2stMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByb2xlLm1vYmlsaXR5LT1jYXJkLmNhcmRDb3N0WzVdO1xyXG4gICAgICAgIGNjLmZpbmQoJ0NhbnZhcy9EZWNrJykuZ2V0Q29tcG9uZW50KCdEZWNrJykucmVtb3ZlQ2FyZCg1KTsgICAgICAgIFxyXG4gICAgfSxcclxuICAgIHdlYWtfNjpmdW5jdGlvbihjYXJkKXtcclxuICAgICAgICB2YXIgcm9sZT1jYy5maW5kKCdDYW52YXMnKS5nZXRDb21wb25lbnQoJ2dsb2JhbEdhbWUnKS5ub3dQbGF5ZXI7XHJcbiAgICAgICAgdmFyIGluZGV4PU51bWJlcihyb2xlLm5hbWVbNl0pO1xyXG4gICAgICAgIHZhciB0ZWFtbWF0ZT1pbmRleCsyPjQ/aW5kZXgtMjppbmRleCsyO1xyXG4gICAgICAgIHZhciBlbmVteTE9aW5kZXgrMT40P2luZGV4LTM6aW5kZXgrMTtcclxuICAgICAgICB2YXIgZW5lbXkyPXRlYW1tYXRlKzE+ND90ZWFtbWF0ZS0zOnRlYW1tYXRlKzE7XHJcbiAgICAgICAgZW5lbXkxPWNjLmZpbmQoXCJDYW52YXMvUGVyc29ucy9QZXJzb25cIitlbmVteTEpLmdldENvbXBvbmVudCgnUGVyc29uJyk7XHJcbiAgICAgICAgZW5lbXkyPWNjLmZpbmQoXCJDYW52YXMvUGVyc29ucy9QZXJzb25cIitlbmVteTIpLmdldENvbXBvbmVudCgnUGVyc29uJyk7XHJcbiAgICAgICAgdmFyIGJ1ZmY9Y2MuZmluZCgnQ2FudmFzJykuZ2V0Q29tcG9uZW50KCdCdWZmJyk7XHJcbiAgICAgICAgYnVmZi50b2RvTGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgZW5kVHVybjp3aW5kb3cuZ2xvYmFsLm5vd1R1cm4rMixcclxuICAgICAgICAgICAgcGVyc29uOltlbmVteTEsZW5lbXkxLmF0dGFjayE9MCxlbmVteTIsZW5lbXkyLmF0dGFjayE9MF0sXHJcbiAgICAgICAgICAgIGFjdDpmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wZXJzb25bMF0uYXR0YWNrKz1wZXJzb25bMV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGFja1syXS5hdHRhY2srPXBlcnNvblszXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pOyAgICAgICAgXHJcbiAgICAgICAgZW5lbXkxLmF0dGFjaz1NYXRoLm1heCgwLGVuZW15MS5hdHRhY2stMSk7XHJcbiAgICAgICAgZW5lbXkyLmF0dGFjaz1NYXRoLm1heCgwLGVuZW15Mi5hdHRhY2stMSk7XHJcbiAgICAgICAgcm9sZS5tb2JpbGl0eS09Y2FyZC5jYXJkQ29zdFs2XTtcclxuICAgICAgICBjYy5maW5kKCdDYW52YXMvRGVjaycpLmdldENvbXBvbmVudCgnRGVjaycpLnJlbW92ZUNhcmQoNik7XHJcbiAgICAgICAgXHJcbiAgICB9LFxyXG4gICAgaGVhbF84OmZ1bmN0aW9uKGNhcmQpe1xyXG4gICAgICAgIHZhciByb2xlPWNjLmZpbmQoJ0NhbnZhcycpLmdldENvbXBvbmVudCgnZ2xvYmFsR2FtZScpLm5vd1Byb3BlcnR5O1xyXG4gICAgICAgIHJvbGUuYmxvb2QrPTE7XHJcbiAgICAgICAgcm9sZS5tb2JpbGl0eS09Y2FyZC5jYXJkQ29zdFs4XTtcclxuICAgICAgICBjYy5maW5kKCdDYW52YXMvRGVjaycpLmdldENvbXBvbmVudCgnRGVjaycpLnJlbW92ZUNhcmQoOCk7XHJcbiAgICB9LFxyXG4gICAgaG9seU5vdmFfOTpmdW5jdGlvbihjYXJkKXtcclxuICAgICAgICB2YXIgcm9sZT1jYy5maW5kKCdDYW52YXMnKS5nZXRDb21wb25lbnQoJ2dsb2JhbEdhbWUnKS5ub3dQbGF5ZXI7XHJcbiAgICAgICAgdmFyIGluZGV4PU51bWJlcihyb2xlLm5hbWVbNl0pO1xyXG4gICAgICAgIHZhciB0ZWFtbWF0ZT1pbmRleCsyPjQ/aW5kZXgtMjppbmRleCsyO1xyXG4gICAgICAgIHZhciBlbmVteTE9aW5kZXgrMT40P2luZGV4LTM6aW5kZXgrMTtcclxuICAgICAgICB2YXIgZW5lbXkyPXRlYW1tYXRlKzE+ND90ZWFtbWF0ZS0zOnRlYW1tYXRlKzE7XHJcbiAgICAgICAgcm9sZT1jYy5maW5kKFwiQ2FudmFzL1BlcnNvbnMvUGVyc29uXCIraW5kZXgpLmdldENvbXBvbmVudCgnUGVyc29uJyk7XHJcbiAgICAgICAgdGVhbW1hdGU9Y2MuZmluZChcIkNhbnZhcy9QZXJzb25zL1BlcnNvblwiK3RlYW1tYXRlKS5nZXRDb21wb25lbnQoJ1BlcnNvbicpO1xyXG4gICAgICAgIGVuZW15MT1jYy5maW5kKFwiQ2FudmFzL1BlcnNvbnMvUGVyc29uXCIrZW5lbXkxKS5nZXRDb21wb25lbnQoJ1BlcnNvbicpO1xyXG4gICAgICAgIGVuZW15Mj1jYy5maW5kKFwiQ2FudmFzL1BlcnNvbnMvUGVyc29uXCIrZW5lbXkyKS5nZXRDb21wb25lbnQoJ1BlcnNvbicpO1xyXG4gICAgICAgIGlmIChyb2xlLmlzRGVhZD09MClcclxuICAgICAgICAgICAgcm9sZS5ibG9vZCs9MjtcclxuICAgICAgICBpZiAodGVhbW1hdGUuaXNEZWFkPT0wKVxyXG4gICAgICAgICAgICB0ZWFtbWF0ZS5ibG9vZCs9MjtcclxuICAgICAgICBpZiAoZW5lbXkxLmlzRGVhZD09MClcclxuICAgICAgICAgICAgZW5lbXkxLmJsb29kKz0xO1xyXG4gICAgICAgIGlmIChlbmVteTIuaXNEZWFkPT0wKVxyXG4gICAgICAgICAgICBlbmVteTIuYmxvb2QrPTE7XHJcbiAgICAgICAgcm9sZS5tb2JpbGl0eS09Y2FyZC5jYXJkQ29zdFs5XTtcclxuICAgICAgICBjYy5maW5kKCdDYW52YXMvRGVjaycpLmdldENvbXBvbmVudCgnRGVjaycpLnJlbW92ZUNhcmQoOSk7XHJcbiAgICB9LFxyXG4gICAgdG91Z2hfMTI6ZnVuY3Rpb24oY2FyZCl7XHJcbiAgICAgICAgdmFyIHJvbGU9Y2MuZmluZCgnQ2FudmFzJykuZ2V0Q29tcG9uZW50KCdnbG9iYWxHYW1lJykubm93UHJvcGVydHk7XHJcbiAgICAgICAgcm9sZS5hdHRhY2sqPTI7XHJcbiAgICAgICAgdmFyIGJ1ZmY9Y2MuZmluZCgnQ2FudmFzJykuZ2V0Q29tcG9uZW50KCdCdWZmJyk7XHJcbiAgICAgICAgYnVmZi50b2RvTGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgZW5kVHVybjp3aW5kb3cuZ2xvYmFsLm5vd1R1cm4rMSxcclxuICAgICAgICAgICAgcGVyc29uOnJvbGUsXHJcbiAgICAgICAgICAgIGFjdDpmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wZXJzb24uYXR0YWNrPU51bWJlcih0aGlzLnBlcnNvbi5hdHRhY2svMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByb2xlLm1vYmlsaXR5LT1jYXJkLmNhcmRDb3N0WzEyXTtcclxuICAgICAgICBjYy5maW5kKCdDYW52YXMvRGVjaycpLmdldENvbXBvbmVudCgnRGVjaycpLnJlbW92ZUNhcmQoMTIpOyAgICAgICAgXHJcbiAgICB9LFxyXG4gICAgc2F2ZV8xNjpmdW5jdGlvbihjYXJkKXtcclxuICAgICAgICB2YXIgcm9sZT1jYy5maW5kKCdDYW52YXMnKS5nZXRDb21wb25lbnQoJ2dsb2JhbEdhbWUnKS5ub3dQcm9wZXJ0eTtcclxuICAgICAgICB2YXIgaW5kZXg9TnVtYmVyKHJvbGUubmFtZVs2XSk7XHJcbiAgICAgICAgdmFyIHRlYW1tYXRlPWluZGV4KzI+ND9pbmRleC0yOmluZGV4KzI7XHJcbiAgICAgICAgdGVhbW1hdGU9Y2MuZmluZChcIkNhbnZhcy9QZXJzb25zL1BlcnNvblwiK3RlYW1tYXRlKS5nZXRDb21wb25lbnQoJ1BlcnNvbicpO1xyXG4gICAgICAgIGlmICh0ZWFtbWF0ZS5pc0RlYWQ9PTEpe1xyXG4gICAgICAgICAgICB0ZWFtbWF0ZS5pc0RlYWQ9MDtcclxuICAgICAgICAgICAgdGVhbW1hdGUuYmxvb2Q9NTtcclxuICAgICAgICAgICAgdGVhbW1hdGUubW9iaWxpdHk9MztcclxuICAgICAgICB9XHJcbiAgICAgICAgcm9sZS5tb2JpbGl0eS09Y2FyZC5jYXJkQ29zdFsxNl07XHJcbiAgICAgICAgY2MuZmluZCgnQ2FudmFzL0RlY2snKS5nZXRDb21wb25lbnQoJ0RlY2snKS5yZW1vdmVDYXJkKDE2KTtcclxuICAgIH0sXHJcbiAgICBvbkxvYWQgKCkge1xyXG4gICAgICAgIHRoaXMuY2FyZENvc3Q9WzAsMCwwLDAsMCwxMTExMTEwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdOy8vWzQsMywyLDMsMyw0LDQsNSwyLDMsMywzLDMsMyw0LDQsNV07XHJcbiAgICAgICAgdGhpcy5jYXJkRnVuY3Rpb249bmV3IEFycmF5KCk7XHJcbiAgICAgICAgdGhpcy5jYXJkRnVuY3Rpb25bM109dGhpcy5zaGllbGRfMztcclxuICAgICAgICB0aGlzLmNhcmRGdW5jdGlvbls0XT10aGlzLmhhbGZTaGllbGRfNDtcclxuICAgICAgICB0aGlzLmNhcmRGdW5jdGlvbls1XT10aGlzLmJsZXNzXzU7XHJcbiAgICAgICAgdGhpcy5jYXJkRnVuY3Rpb25bNl09dGhpcy53ZWFrXzY7XHJcbiAgICAgICAgdGhpcy5jYXJkRnVuY3Rpb25bOF09dGhpcy5oZWFsXzg7XHJcbiAgICAgICAgdGhpcy5jYXJkRnVuY3Rpb25bOV09dGhpcy5ob2x5Tm92YV85O1xyXG4gICAgICAgIHRoaXMuY2FyZEZ1bmN0aW9uWzEyXT10aGlzLnRvdWdoXzEyO1xyXG4gICAgICAgIHRoaXMuY2FyZEZ1bmN0aW9uWzE2XT10aGlzLnNhdmVfMTY7XHJcbiAgICB9LFxyXG5cclxuICAgIHN0YXJ0ICgpIHtcclxuXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxyXG59KTtcclxuIl19